}
}
##separates out the farmers by age group
last_age = 0
for (age in c(40,50,60,70,80, 100)){
youngest_year = 2020 - last_age
oldest_year = 2020 - age
FIONA[paste("between",toString(oldest_year),toString(youngest_year), sep="_")] <- ifelse(between(FIONA$farmer_birth_year, oldest_year, youngest_year), 1, 0)
last_age = age
}
colnames(FIONA)
---
title: "Assignment2"
author: "Esther Spurlock"
date: "5/12/2020"
output: pdf_document
---
library(dplyr)
library(knitr)
library(readr)
library(readxl)
library(rmarkdown)
library(rvest)
library(xml2)
library(tidyr)
library(sf)
library(ggplot2)
library(maptools)
library(rgdal)
library(plyr)
##Question 4
##read in the data, filtering out anyone born before 1920 (100 year old farmers just don't seem probable)
FIONA <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps2_data.csv") %>% filter(!farmer_birth_year %in% c('1919', '1916'))
##turn the farmer birth year from a string to an int
new_fby <- FIONA$farmer_birth_year
new_fby <- replace(new_fby, new_fby=='nineteen seventy-three', 1973)
new_fby <- replace(new_fby, new_fby=='nineteen seventy-two', 1972)
FIONA$farmer_birth_year <- strtoi(new_fby, base = 0L)
##create a diff in profits variable
FIONA$profits_difference = FIONA$profits_2016 - FIONA$profits_2005
##create dummy variables for all of the crops and districts
for (column in c("district", "crop")){
col <- FIONA[column]
for (value in unique(col)){
FIONA[paste(column, value, sep="_")] <- ifelse(col==value, 1, 0)
}
}
##separates out the farmers by age group
last_age = 0
for (age in c(40,50,60,70,80, 100)){
youngest_year = 2020 - last_age
oldest_year = 2020 - age
FIONA[paste("born",toString(oldest_year),toString(youngest_year), sep="_")] <- ifelse(between(FIONA$farmer_birth_year, oldest_year, youngest_year), 1, 0)
last_age = age
}
colnames(FIONA)
regs <- lapply(FIONA %>% select(fertilizer_use, profits_2005, farmer_birth_year, crop_RICE, crop_WHEAT, crop_LENTILS, crop_COTTON), function (x) lm(x ~ fiona_farmer, data=FIONA))
regs
bal_tab <- t(sapply(regs, function (x) coef(summary(x))[c(2,8)]))
colnames(bal_tab) <- c("Difference in Means", "p-value")
bal_tab
colnames(FIONA)
regress_technique <- lm(profits_difference ~ fiona_farmer + fertilizer_use + profits_2005 + district_KARUR + district_TENKASI + district_MADURAI + district_PUDUKKOTTAI + district_THANJAVUR + district_DINDIGUL + crop_RICE + crop_LENTILS + crop_WHEAT + crop_COTTON + born_1980_2020 + born_1970_1980 + born_1960_1970 + born_1950_1960 + born_1940_1950 + born_1920_1940, data=FIONA)
summary(regress_technique)
naive <- lm(profits_difference ~ fiona_farmer, data=FIONA)
summary(naive)
matchit(profits_difference ~ fiona_farmer,data=FIONA)
exactMatch(profits_difference ~ fiona_farmer,data=FIONA)
Match(profits_difference ~ fiona_farmer,data=FIONA)
install.packages("MatchIt")
library(Matching)
Match(profits_difference ~ fiona_farmer,data=FIONA)
exactMatch(profits_difference ~ fiona_farmer,data=FIONA)
library(MatchIt)
matchit(profits_difference ~ fiona_farmer,data=FIONA)
matchit(profits_difference ~ fiona_farmer,method="nearest",data=FIONA)
matchit(profits_difference ~ fiona_farmer,method="nearest",exact=c(crop, fertilizer_use, farmer_birth_year),data=FIONA)
matchit(profits_difference ~ fiona_farmer, data=FIONA)
matchit(fiona_farmer ~ profits_difference, data=FIONA)
range(FIONA$profits_2005)
regress_technique <- lm(profits_difference ~ fiona_farmer + fertilizer_use + profits_2005 + crop_RICE + crop_LENTILS + crop_WHEAT + crop_COTTON + born_1980_2020 + born_1970_1980 + born_1960_1970 + born_1950_1960 + born_1940_1950 + born_1920_1940, data=FIONA)
summary(regress_technique)
colnames(FIONA)
matched <- matchit(formula = fiona_farmer ~ crop + farmer_birth_year + fertilizer_use + profits_2005, data = FIONA)
matchen
matched
matched <- matchit(formula = fiona_farmer ~ crop + farmer_birth_year + fertilizer_use + profits_2005, method="nearest", data = FIONA)
matched
match_technique <-(profits_difference ~ fiona_farmer, data=matched)
match_technique <-lm(profits_difference ~ fiona_farmer, data=matched)
summary(matched)
match_technique <-glm(profits_difference ~ fiona_farmer, data=matched)
model(matched)
matched <- matchit(formula = fiona_farmer ~ crop + farmer_birth_year + fertilizer_use + profits_2005, method="nearest", data = FIONA, distance.options = c(profits_difference))
matched
matched <- matchit(formula = fiona_farmer ~ crop + farmer_birth_year + fertilizer_use + profits_2005, method="nearest", data = FIONA, distance.options = c(profits_difference))
summary(matched)
plot(matched)
summary(matched)
match.data(matched)
data_matched = match.data(matched)
lm(fiona_farmer ~ profits_difference, data=data_matched)
lm(profits_difference~fiona_farmer, data=data_matched)
matched <- matchit(formula = fiona_farmer ~ crop + farmer_birth_year + fertilizer_use + profits_2005, method="nearest", data = FIONA)
##put the latched data into a df
data_matched = match.data(matched)
matching_technique <- lm(profits_difference ~ fiona_farmer + fertilizer_use + profits_2005 + crop_RICE + crop_LENTILS + crop_WHEAT + crop_COTTON + born_1980_2020 + born_1970_1980 + born_1960_1970 + born_1950_1960 + born_co1940_1950 + born_1920_1940, data=data_matched)
summary(matching_technique)
matching_technique <- lm(profits_difference ~ fiona_farmer + fertilizer_use + profits_2005 + crop_RICE + crop_LENTILS + crop_WHEAT + crop_COTTON + born_1980_2020 + born_1970_1980 + born_1960_1970 + born_1950_1960 + born_1940_1950 + born_1920_1940, data=data_matched)
summary(matching_technique)
matching_technique <- lm(profits_difference ~ fiona_farmer + fertilizer_use + profits_2005 + district_KARUR + district_TENKASI + district_MADURAI + district_PUDUKKOTTAI + district_THANJAVUR + district_DINDIGUL + crop_RICE + crop_LENTILS + crop_WHEAT + crop_COTTON + born_1980_2020 + born_1970_1980 + born_1960_1970 + born_1950_1960 + born_1940_1950 + born_1920_1940, data=data_matched)
summary(matching_technique)
matching_technique <- lm(profits_difference ~ fiona_farmer, data=data_matched)
summary(matching_technique)
mean(data_matched$profits_difference)
mean(FIONA$profits_2016)
library(dplyr)
library(knitr)
library(readr)
library(readxl)
library(rmarkdown)
library(rvest)
library(xml2)
library(tidyr)
library(sf)
library(ggplot2)
library(rgdal)
library(plyr)
library(dplyr)
library(knitr)
library(readr)
library(readxl)
library(rmarkdown)
library(rvest)
library(xml2)
library(tidyr)
library(sf)
library(ggplot2)
library(rgdal)
calbears <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/ps3_data.csv")
calbears$iou
range(calbears$iou)
mean(calbears$iou)
count(calbears, iou == 2)
count(calbears$iou == 2)
colnames(calbears)
instrument <- lm(utility_outage_hours ~ iou)
instrument <- lm(utility_outage_hours ~ iou, data=calbears)
outcome <- lm(installed_pv_contractors ~ instrument, data=calbears)
outcome <- lm(calbears$installed_pv_contractors ~ instrument)
outcome <- ivreg(calbears$installed_pv_contractors ~ instrument)
library(AER)
install.packages("aer")
install.packages("AER")
library(AER)
outcome <- ivreg(calbears$installed_pv_contractors ~ instrument)
outcome <- ivreg(installed_pv_contractors ~ instrument | iou, data=calbears)
outcome <- ivreg(installed_pv_contractors ~ utility_outage_hours | iou, data=calbears)
summary(outcome)
colnames(calbears)
corr <- lm(installed_pv_contractors ~ installed_pv_backchecks, data=calbears)
##make a graph
plot(calbears$installed_pv_backchecks, calbears$installed_pv_contractors)
abline(corr, col="blue")
plot(calbears$installed_pv_contractors, calbears$installed_pv_backchecks)
abline(corr, col="blue")
plot(calbears$installed_pv_backchecks, calbears$installed_pv_contractors)
abline(corr, col="blue")
summary(corr)
calbears$installed_pv_backchecks
calbears_backchecks -> calbears %>% drop_na(installed_pv_backchecks)
calbears_backchecks <- calbears %>% drop_na(installed_pv_backchecks)
calbears_backchecks$installed_pv_backchecks
corr <- lm(installed_pv_contractors ~ installed_pv_backchecks, data=calbears_backchecks)
summary(corr)
##make a graph
plot(calbears_backchecks$installed_pv_backchecks, calbears_backchecks$installed_pv_contractors)
abline(corr, col="blue")
contract <- ivreg(installed_pv_contractors ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(contract)
back <- ivreg(installed_pv_contractors ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(back)
back <- ivreg(installed_pv_backchecks ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(back)
colnames(calbears_backchecks)
corr <- lm(installed_pv_contractors_v2 ~ installed_pv_backchecks, data=calbears_backchecks)
plot(calbears_backchecks$installed_pv_backchecks, calbears_backchecks$installed_pv_contractors_v2)
abline(corr, col="blue")
contract_2 <- ivreg(installed_pv_contractors_v2 ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(contract_2)
colnames(calbears_backchecks)
calbears_backckecks$contract_diff <- calbears_backckecks$installed_pv_contractors_v2 - calbears_backckecks$installed_pv_contractors
calbears_backchecks$contract_diff <- calbears_backchecks$installed_pv_contractors_v2 - calbears_backchecks$installed_pv_contractors
ut1 <- calbears_backchecks %>% filter(iou == 1)
range(ut1$iou)
reg1 <- ivreg(installed_pv_backchecks ~ utility_outage_houts | contract_diff, data=ut1)
summary(reg1)
reg1 <- ivreg(installed_pv_backchecks ~ utility_outage_hours | contract_diff, data=ut1)
summary(reg1)
reg2 <- ivreg(installed_pv_backchecks ~ utility_outage_hours | contract_diff, data=ut2)
summary(reg2)
ut2 <- calbears_backchecks %>% filter(iou == 2)
reg2 <- ivreg(installed_pv_backchecks ~ utility_outage_hours | contract_diff, data=ut2)
summary(reg2)
colnames(calbears_backchecks)
reg1 <- ivreg(installed_pv_backchecks ~ survey_outage_hours | iou, data=calbears_backchecks)
summary(reg1)
reg2 <- ivreg(installed_pv_contractors_v2 ~ survey_outage_hours | iou, data=calbears)
summary(reg2)
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/final_exam_2020.csv")
library(dplyr)
library(knitr)
library(readr)
library(readxl)
library(rmarkdown)
library(rvest)
library(xml2)
library(tidyr)
library(sf)
library(ggplot2)
library(maptools)
library(rgdal)
library(plyr)
library(MatchIt)
library(reshape2)
library(ggpubr)
##import the data
data <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/final_exam_2020.csv")
View(data)
plot(data$list_rank, data$share_women)
abline(x=4500)
abline(4500)
plot(4500)
plot(x=4500)
ab <- plot(4500)
plot(data$list_rank, data$share_women)
abline(ab)
plot(data$list_rank, data$share_women, type='bar')
plot(data$female_leader, data$reservation)
plot(data$female_leader, data$list_rank)
plot(data$list_rank, data$female_leader)
plot(data$list_rank, data$public_goods_number)
plot(data$share_women, data$reservation)
likelihood -> lm(female_leader~list_rank, data=data)
likelihood <- lm(female_leader~list_rank, data=data)
plot(data$list_rank, data$female_leader)
abline(likelihood)
regression <- lm(public_goods_number ~ female_leader + number_of_resigents + per_capita_income_rupees + manufacturing_product_share + factor(incorp_year),data=data)
regression <- lm(public_goods_number ~ female_leader + number_of_residents + per_capita_income_rupees + manufacturing_product_share + factor(incorp_year),data=data)
summary(regression)
mean(data$public_goods_number)
library(dplyr)
library(readr)
library(rvest)
##Importing our data
BURLIG <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/Past/ps1_data.csv") %>% filter(baseline_wages > 0)
##Creating subsets
treatment <- BURLIG %>%filter(burlig_trt==1)
control <- BURLIG %>%filter(burlig_trt==0)
#perform a 2-way t-test to see if baseline wages are the same for treatment and control groups
t.test(treatment$baseline_wages, control$baseline_wages)
linear_wage <- lm(burlig_trt ~ baseline_wages, data=BURLIG)
summary(linear_wage)
t.test(treatment$baseline_sales, control$baseline_sales)
linear_sales <- lm(burlig_trt ~ baseline_sales, data=BURLIG)
summary(linear_sales)
hist(treatment$baseline_wages)
hist(control$baseline_wages)
library(dplyr)
library(readr)
library(rvest)
#import the data, filtering out wages that are less than 0
BURLIG <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/Past/ps1_data.csv") %>% filter(baseline_wages > 0)
#create subsets of the data for both treatment and control
treatment <- BURLIG %>%filter(burlig_trt==1)
control <- BURLIG %>%filter(burlig_trt==0)
#perform a 2-way t-test to see if baseline wages are the same for treatment and control groups
#we must reject the null hypothesis and accept the alternative hypothesis
#the baseline wages are not the same across treatment and control
t.test(treatment$baseline_wages, control$baseline_wages)
linear_wage <- lm(burlig_trt ~ baseline_wages, data=BURLIG)
summary(linear_wage)
#perform a 2-way t-test to see if sales are the same for treatment and control groups
#we must reject the null hypothesis and accept the alternative hypothesis
#the number of sales are not the same across treatment and control
t.test(treatment$baseline_sales, control$baseline_sales)
linear_sales <- lm(burlig_trt ~ baseline_sales, data=BURLIG)
summary(linear_sales)
#perform a 2-way t-test to see if number of workers are the same for treatment and control groups
#we must reject the null hypothesis and accept the alternative hypothesis
#the number of employees are not the same across treatment and control
t.test(treatment$baseline_employees, control$baseline_employees)
linear_employees <- lm(burlig_trt ~ baseline_employees, data=BURLIG)
summary(linear_employees)
#add columns to indicate the change in baseline wages, employees, and sales
BURLIG$change_wages=BURLIG$endline_wages-BURLIG$baseline_wages
BURLIG$change_employees=BURLIG$endline_employees-BURLIG$baseline_employees
BURLIG$change_sales=BURLIG$endline_sales-BURLIG$baseline_sales
#add a column to BURLIG holding the percent in compliance
BURLIG$percent_compliant <- sum(BURLIG$burlig_trt_take)/sum(BURLIG$burlig_trt)
#run regressions to see how treatment affects a change in wages, employees, and sales
#because baseline numbers for wages, employees, and sales were not uniformly distributed through treatment and control
#we will control for those variables
regress_wages <- lm(change_wages ~ percent_compliant*burlig_trt + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_wages)
regress_owner_female <- lm(change_owner_female ~ burlig_trt, data=BURLIG)
summary(regress_owner_female)
<!--
Please describe your estimate: what is the interpretation
of your coefficient (be clear about your units)?
For wages: The coefficient estimates that treatment is correlated with an increase in wages of $40,425
regress_wages <- lm(change_wages ~ burlig_trt + endline_employees, data=BURLIG)
summary(regress_wages)
regress_sales <- lm(change_sales ~ burlig_trt  + endline_employees, data=BURLIG)
summary(regress_sales)
regress_employees <- lm(change_employees ~ burlig_trt  + endline_employees, data=BURLIG)
summary(regress_employees)
regress_wages <- lm(change_wages ~ burlig_trt + baseline_employees, data=BURLIG)
summary(regress_wages)
regress_sales <- lm(change_sales ~ burlig_trt  + baseline_employees, data=BURLIG)
summary(regress_sales)
regress_employees <- lm(change_employees ~ burlig_trt  + baseline_employees, data=BURLIG)
summary(regress_employees)
##first, we need to add a column to BURLIG holding the percent in compliance
BURLIG$percent_compliant <- sum(BURLIG$burlig_trt_take)/sum(BURLIG$burlig_trt)
regress_wages <- lm(change_wages ~ percent_compliant*burlig_trt, data=BURLIG)
summary(regress_wages)
regress_sales <- lm(change_sales ~ percent_compliant*burlig_trt, data=BURLIG)
summary(regress_sales)
regress_employees <- lm(change_employees ~ percent_compliant*burlig_trt, data=BURLIG)
summary(regress_employees)
#run regressions to see how treatment affects a change in wages, employees, and sales
#because baseline numbers for wages, employees, and sales were not uniformly distributed through treatment and control
#we will control for those variables
regress_wages <- lm(change_wages ~ percent_compliant*burlig_trt + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_wages)
regress_sales <- lm(change_sales ~ percent_compliant*burlig_trt  + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_sales)
regress_employees <- lm(change_employees ~ percent_compliant*burlig_trt  + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_employees)
#import the data, filtering out wages that are less than 0
BURLIG <- read_csv("C:/Users/eespu/OneDrive/Desktop/Program_Eval/Past/ps1_data.csv") %>% filter(baseline_wages > 0)
#create subsets of the data for both treatment and control
treatment <- BURLIG %>%filter(burlig_trt==1)
control <- BURLIG %>%filter(burlig_trt==0)
#perform a 2-way t-test to see if baseline wages are the same for treatment and control groups
#we must reject the null hypothesis and accept the alternative hypothesis
#the baseline wages are not the same across treatment and control
t.test(treatment$baseline_wages, control$baseline_wages)
linear_wage <- lm(burlig_trt ~ baseline_wages, data=BURLIG)
summary(linear_wage)
#perform a 2-way t-test to see if sales are the same for treatment and control groups
#we must reject the null hypothesis and accept the alternative hypothesis
#the number of sales are not the same across treatment and control
t.test(treatment$baseline_sales, control$baseline_sales)
linear_sales <- lm(burlig_trt ~ baseline_sales, data=BURLIG)
summary(linear_sales)
#perform a 2-way t-test to see if number of workers are the same for treatment and control groups
#we must reject the null hypothesis and accept the alternative hypothesis
#the number of employees are not the same across treatment and control
t.test(treatment$baseline_employees, control$baseline_employees)
linear_employees <- lm(burlig_trt ~ baseline_employees, data=BURLIG)
summary(linear_employees)
#add columns to indicate the change in baseline wages, employees, and sales
BURLIG$change_wages=BURLIG$endline_wages-BURLIG$baseline_wages
BURLIG$change_employees=BURLIG$endline_employees-BURLIG$baseline_employees
BURLIG$change_sales=BURLIG$endline_sales-BURLIG$baseline_sales
#add a column to BURLIG holding the percent in compliance
BURLIG$percent_compliant <- sum(BURLIG$burlig_trt_take)/sum(BURLIG$burlig_trt)
#We see that treatment is associated with a $42,000 increase in farmer's wages
#because the p-value is less than the 5% significance level, this finding is statistically significant
regress_wages <- lm(change_wages ~ percent_compliant*burlig_trt + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_wages)
#We see that treatment is associated with 208.4 increased sales
#because the p-value is less than the 5% significance level, this finding is statistically significant
regress_sales <- lm(change_sales ~ percent_compliant*burlig_trt  + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_sales)
#We see that treatment is associated with an increase of 1.3 employees
#because the p-value is less than the 5% significance level, this finding is statistically significant
regress_employees <- lm(change_employees ~ percent_compliant*burlig_trt  + baseline_employees + baseline_wages + baseline_sales, data=BURLIG)
summary(regress_employees)
source('C:/Users/eespu/OneDrive/Desktop/Program_Eval/Redo/Farming_Analysis.R')
?dplyr
#import the data, filtering out wages that are less than 0
BURLIG <- read_csv("data/farming_loans_data.csv") %>% filter(baseline_wages > 0)
setwd("C:/Users/eespu/R_Analyses")
#import the data, filtering out wages that are less than 0
BURLIG <- read_csv("data/farming_loans_data.csv") %>% filter(baseline_wages > 0)
##import in the data
data <- read_csv("data/air_quality_data.csv", col_types = cols(.default=col_double()))
##replace the NA values in the air quality regulation year with 9999
data[is.na(data)] <- 9999
##create a column to indicate the number of years from treatment
##this will be negative if it is before the treatment year and positive if it is after the treatment year
data$years_to_treat <- data$year - data$air_quality_regulation_year
##create a column to indicate if we are in a treatment year
##this will be 1 if years_to_treat is + and 0 if ytt is -
data$treatment_year <- ifelse(data$years_to_treat > 0, 1, 0)
##comparison of the averages
avgComp <- lm(particulate_matter~treatment_year,data=data)
summary(avgComp)
##take out only the municipalities who imposed regulations in 2004
data2004 <- data %>% filter(air_quality_regulation_year %in% c(2004))
##perform time series analysis on just the 2004 data
reg2004 <- lm(particulate_matter~treatment_year*years_to_treat,data=data2004)
summary(reg2004)
#plot particulate level just for municipalities who imposed regulations in 2004
plot(data2004$year, data2004$particulate_matter)
#plot the mean
plot2004 <- ggplot(data2004, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
library(ggpubr)
library(ggplot2)
#plot the mean
plot2004 <- ggplot(data2004, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot2004
#take out municipalities who never imposed regulations
dataControl <- data %>% filter(air_quality_regulation_year %in% c(9999))
#now we just get the data for those that had regulations imposed in 2006
data2006 <- data %>% filter(air_quality_regulation_year %in% c(2006))
plot2006 <- ggplot(data2006, aes(x=year, y=particulate_matter)) + stat_summary(fun="mean", geom="line")
plot2006
#create a data set of the control group and the 2006 group
data2006Control <- data %>% filter(air_quality_regulation_year %in% c(2006, 9999))
#we run a t-test to see the difference in means
t.test(data2006$particulate_matter, dataControl$particulate_matter)
#run a simple regression comparing municipalities that imposed regulations in 2006 to
#municipalities that never imposed regulations
simpReg <- lm(particulate_matter~treatment_year*years_to_treat,data=data2006Control)
summary(simpReg)
#regression with fixed effects
feReg <- lm(particulate_matter~treatment_year*years_to_treat+factor(year)+factor(municipality_id),data=data2006Control)
summary(feReg)
##create dfs for each regulation introduction year
plot(x=data$year, y=data$particulate_matter, col=data$air_quality_regulation_year)
ggplot(data, aes(x=year, y=particulate_matter, color=air_quality_regulation_year))+ stat_summary(fun="mean", geom="line")
#now we filter out 2006
dataClean <- data %>% filter(!air_quality_regulation_year %in% c(2006))
#now we run panel fixed effects regression on data not including municipalities that imposed regulations in 2006
panelRegClean <- lm(particulate_matter~treatment_year+factor(year)+factor(municipality_id), data=dataClean)
summary(panelRegClean)
#now we run a time series anaysis with fixed effects of year and municipality
esRegClean <- lm(particulate_matter~treatment_year*years_to_treat+factor(year)+factor(municipality_id), data=dataClean)
summary(esRegClean)
#now we graph it with 95% confidence intervals
#code from https://stackoverflow.com/questions/14069629/how-can-i-plot-data-with-confidence-intervals
set.seed(1234)
# predicts + interval
newx <- seq(min(dataClean$particulate_matter), max(dataClean$particulate_matter), length.out=100)
preds <- predict(esRegClean, newdata = data.frame(x=newx),
interval = 'confidence')
# plot
plot(esRegClean)
polygon(c(rev(newx), newx), c(rev(preds[ ,3]), preds[ ,2]), col = 'grey80', border = NA)
# intervals
lines(newx, preds[ ,3], lty = 'dashed', col = 'red')
lines(newx, preds[ ,2], lty = 'dashed', col = 'red')
##read in the data
calbears <- read_csv("data/strategic_blackouts_data.csv")
##perform regression using IV
outcome <- ivreg(installed_pv_contractors ~ utility_outage_hours | iou, data=calbears)
library(dplyr)
library(knitr)
library(readr)
library(readxl)
library(rmarkdown)
library(rvest)
library(xml2)
library(tidyr)
library(sf)
library(ggplot2)
library(rgdal)
library(AER)
#perform regression using IV
outcome <- ivreg(installed_pv_contractors ~ utility_outage_hours | iou, data=calbears)
summary(outcome)
#make a subsample of the data filtering out all NA values for installed_pv_backchecks
calbears_backchecks <- calbears %>% drop_na(installed_pv_backchecks)
#make a regression line
corr <- lm(installed_pv_contractors ~ installed_pv_backchecks, data=calbears_backchecks)
#make a graph
plot(calbears_backchecks$installed_pv_backchecks, calbears_backchecks$installed_pv_contractors)
abline(corr, col="blue")
#regression on the new dataset using pv_contractors
contract <- ivreg(installed_pv_contractors ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(contract)
#regression of the new dataset using pv_backchecks
back <- ivreg(installed_pv_backchecks ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(back)
#make a new regression line
corr <- lm(installed_pv_contractors_v2 ~ installed_pv_backchecks, data=calbears_backchecks)
plot(calbears_backchecks$installed_pv_backchecks, calbears_backchecks$installed_pv_contractors_v2)
abline(corr, col="blue")
contract_2 <- ivreg(installed_pv_contractors_v2 ~ utility_outage_hours | iou, data=calbears_backchecks)
summary(contract_2)
#create a new column
calbears_backchecks$contract_diff <- calbears_backchecks$installed_pv_contractors_v2 - calbears_backchecks$installed_pv_contractors
#create new dbs for the different utilities
ut1 <- calbears_backchecks %>% filter(iou == 1)
ut2 <- calbears_backchecks %>% filter(iou == 2)
#run the regressions
reg1 <- ivreg(installed_pv_backchecks ~ utility_outage_hours | contract_diff, data=ut1)
summary(reg1)
reg2 <- ivreg(installed_pv_backchecks ~ utility_outage_hours | contract_diff, data=ut2)
summary(reg2)
#regression just on backchecks data
reg1 <- ivreg(installed_pv_backchecks ~ survey_outage_hours | iou, data=calbears_backchecks)
summary(reg1)
#the problem described above can be solved by running a regression just on backchecks data
reg1 <- ivreg(installed_pv_backchecks ~ survey_outage_hours | iou, data=calbears_backchecks)
summary(reg1)
reg2 <- ivreg(installed_pv_contractors_v2 ~ survey_outage_hours | iou, data=calbears)
summary(reg2)
